<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Machine Learning</title>
    <link>http://dmml.nu/tags/python/</link>
    <description>Recent content in Python on Machine Learning</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://dmml.nu/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python GUI Frontend Options Comparison</title>
      <link>http://dmml.nu/py-gui/</link>
      <pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://dmml.nu/py-gui/</guid>
      <description>Mainly for the (cross-platform) Python GUI frontend options.
CEF (Chromium Embedded Framework). Pro: can use the same way of MVC thinking (modern html5); build-in chromium browser. Con: someone said it may need a little c++. PyQt (v5). Pro: big community, good doc (for c++). Con: c++ way of thinking, just the language is py (the official GUI tutorial lacks GUI screenshots!); pay for commercial usage; still often needs c++. Tkinter. Pro: build-in w/ py, big community.</description>
    </item>
    
    <item>
      <title>Python-docx for MS Word</title>
      <link>http://dmml.nu/python-docx/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://dmml.nu/python-docx/</guid>
      <description>As the pyhon-docx does not want to provide a documentation (except some APIs) and the API doc web is really hard to browse and read, here are some small tips/demo tutorials to remember/avoid pits and falls.
Please note:
lib (0.8) provides only basic functions mainly for adding something (seems to be for test purpose). The main actions we do in a docx file should be done using MS API via this lib.</description>
    </item>
    
    <item>
      <title>Python Convert Images to PDF</title>
      <link>http://dmml.nu/python-image-pdf/</link>
      <pubDate>Wed, 18 Mar 2020 02:49:42 +0000</pubDate>
      
      <guid>http://dmml.nu/python-image-pdf/</guid>
      <description>Two methods of downloading &amp;amp; converting pictures/images to a combined pdf file with parallel (multi-thread) from Mark Needham.
f.write(img2pdf.convert(&amp;hellip;)) [ref MarkHNeedham]
from PIL import Image [ref DataToFish]
Note: fpdf is not suggested as it canNOT support jpg natively. [ref stackoverflow]</description>
    </item>
    
    <item>
      <title>Python Code Cookbook</title>
      <link>http://dmml.nu/py-cookbook/</link>
      <pubDate>Sun, 01 Jul 2018 19:19:29 +0000</pubDate>
      
      <guid>http://dmml.nu/py-cookbook/</guid>
      <description>See also:
Learning Python, the Language Pandas#Get column_nr in pandas/numpy.
if isinstance(X, pd.DataFrame): X_is_df = True row_nr = X.shape[0] column_nr = X.shape[1] if isinstance(X.columns, pd.core.index.MultiIndex): df_columns_is_multi_index = True else: df_columns_is_multi_index = False else: # non-DF X_is_df = False row_nr = np.shape(X)[0] column_nr = np.shape(X)[1] use dataframe directly against spark#lib Optimus
from optimus import Optimus op = Optimus(master=&amp;#34;local&amp;#34;) df = op.create.df(&amp;lt;some data&amp;gt;) ... Sourcing/Importing#execfile or os.</description>
    </item>
    
    <item>
      <title>Python Code Reuse</title>
      <link>http://dmml.nu/py-reuse/</link>
      <pubDate>Sun, 01 Jul 2018 19:19:29 +0000</pubDate>
      
      <guid>http://dmml.nu/py-reuse/</guid>
      <description>execfile or os.system#execute the other python file in place:
execfile(&amp;#34;/path/to/my/lib/mylib.py&amp;#34;) or:
import os os.system(&amp;#34;python /path/to/my/lib/mylib.py&amp;#34;) import#import sys import os sys.path.append(os.path.abspath(&amp;#34;/path/to/my/lib&amp;#34;)) import mylib ref#See other methods here.0749411)</description>
    </item>
    
    <item>
      <title>Learning Falcon</title>
      <link>http://dmml.nu/falcon/</link>
      <pubDate>Sat, 13 Jan 2018 22:07:13 +0000</pubDate>
      
      <guid>http://dmml.nu/falcon/</guid>
      <description>A great 5-video tutorial: 35minutes on YouTube (6 tomatoes / 2.5 hours for non-stop studing by coding). Author&amp;rsquo;s Github (py2), My Github (py3).
Differences in my Github code:
py3, not py2 using on_put() to test validity of input json from client using on_delete() to test params (just to test, should NOT be used in real-world) using another route /test2?x=1&amp;amp;y=3 to test params Usage in Nix:
pip3 install falcon gunicorn gunicorn app:api # in the folder of app.</description>
    </item>
    
    <item>
      <title>Python the Language (in case of)</title>
      <link>http://dmml.nu/learning-python/</link>
      <pubDate>Sun, 21 Aug 2016 14:19:29 +0000</pubDate>
      
      <guid>http://dmml.nu/learning-python/</guid>
      <description>Related:
learning Django python desktop GUI/frontend py code cookbook/reuse plot in py w pyvis Python in Win by MS official tutorial CN 用 Rust 让 numpy、scikit 和 pandas 加速 100 倍！开源 Weld 技术揭秘 PRE-INSTALL: CONDA VS. PIP#Pip requires apt. Thus, pip+apt. Pip chose to live together with apt (or other package manager) as apt is better at managing packages, especially when related to system. Some pip packages requires system (apt) to cooperate, such as uwsgi, graphviz, ffmpeg, gcc, python3-dev.</description>
    </item>
    
    <item>
      <title>Learning Django</title>
      <link>http://dmml.nu/learning-django/</link>
      <pubDate>Thu, 18 Aug 2016 22:56:34 +0000</pubDate>
      
      <guid>http://dmml.nu/learning-django/</guid>
      <description>(updated 2021.1)
Related:
Learning Python
Ref: This is a combined learning note of:
basic level sentdex&amp;rsquo;s youtube tutorial 2016, the corresponding video+text one is here. official tutorial which is still too complicated for new users, so better to use that after following this blog. middle level another tutorial: Django Tutorials for Beginners 2016 book &amp;ldquo;O&amp;rsquo;Reilly 2014 - Test-Driven Development with Python (django 1.7)&amp;rdquo;. official docs: DOCs.DjangoProject.com. all-in-one 3.8-hour video. Python Django Web Framework - Full Course for Beginners 2018 w/ Code (in sublime).</description>
    </item>
    
    <item>
      <title>Cross-Read &amp; -Write R, Py, Matlab, Binary Files</title>
      <link>http://dmml.nu/binary/</link>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://dmml.nu/binary/</guid>
      <description>Note: feather-format is desigend to transfer data between Py &amp;amp; R [stackoverflow, feather-doc].
.FE#OBS: only for data.frame type, not even arrays.
py (feather-format)#Requires: pip install feather-format. (OBS: feather-format NOT feather.)
write:
import numpy as np import pandas as pd df = pd.DataFrame({&amp;#39;A&amp;#39;: [1, 2, 3], &amp;#39;B&amp;#39;: [4, 5, 6], &amp;#39;C&amp;#39;:[7,8,9]}, index=[&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;]) import feather feather.write_dataframe(df.reset_index(drop=True), &amp;#39;df.fe&amp;#39;) (though the df is created by pandas)
read:
import feather df = feather.</description>
    </item>
    
    <item>
      <title>Jupyter</title>
      <link>http://dmml.nu/jupyter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://dmml.nu/jupyter/</guid>
      <description>INSTALL#Anaconda Way#This is suggested for very new users to use a stable environment.
It is NOT suitable for normal users / experienced programmers / engineers.
for windows#Download Python 3 from Anaconda and install.
From Windows &amp;ldquo;Start&amp;rdquo; menu, run &amp;ldquo;Jupyter&amp;rdquo; directly. (at least since v5.3.1)
Old versions needs to run from navigator as below:
anaconda for linux#Similar to win, for details, see here.</description>
    </item>
    
    <item>
      <title>Plot in Python, Visualization wtih pyvis</title>
      <link>http://dmml.nu/pyvis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://dmml.nu/pyvis/</guid>
      <description>Books &amp;amp; Docs#Seaborn tutorial &amp;amp; gallary OReilly 2017 - [easy to find common examples] Python Data Science Handbook Packt 2015 - [nice code grammar] Python Data Visualization Cookbook, 2nd Ed. (Igor Milovanovic) Packt 2015 - [rich &amp;amp; various content] Mastering Python Data Visualization Packt 2015 - [advanced nice plots &amp;amp; deployments] Mastering matplotlib (D.M. McGreggor) [Very bad composition] Packt 2018 - Matplotlib for Python Developers - 2nd Ed (by Allen Yu, Claire Chung) Overview of Libs#Python Data Visualisation Landscape</description>
    </item>
    
  </channel>
</rss>
